{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AACA,YAAMA,SAAS,CAAC,aAAD,CAAf;AACA,UAAIC,aAAa,IAAjB;AACA,UAAIC,QAAQ,IAAZ;;AAEO,YAAMC,oBAAoB,CAAC,MAAM;AACtC,eAAO,MAAMA,iBAAN,CAAwB;AAC7BC,wBAAc;AACZ,kBAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;AACD,iBAAOC,aAAP,GAAuB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA;AACA,kBAAIR,UAAJ,EAAgB,OAAOO,QAAQP,UAAR,CAAP;AAChB,oBAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;AACAF,0BAAYG,eAAZ,GAA8BC,KAAK;AACjCX,kCAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AAED,eAHD;AAIAP,0BAAYQ,SAAZ,GAAwBJ,KAAK;AAC3Bb,6BAAaa,EAAEE,MAAF,CAASC,MAAtB;AACA;AACAf,wBAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,2BAAWC,KAAX,GAAmB,MAAM;AACvB,wBAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AACD,iBAFD;AAGAG,wBAAQP,UAAR;AACD,eARD;AASAS,0BAAYU,OAAZ,GAAsBN,KAAK;AACzBO,wBAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACA;AACAd,uBAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAJD;AAKD,aAvBM,CAAP;AAwBD;;AAED,iBAAOT,aAAP,CAAqBd,UAArB,EAAiC;AAC/BD,mBAAOyB,OAAP,CAAeC,SAAS;AACtB;AACA,kBAAIzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACEzB,WAAW4B,iBAAX,CAA6BH,KAA7B;;AAEFzB,yBAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACD,aAND;AAOD;;AAED,iBAAOC,eAAP,GAAyB;AACvB,gBAAI/B,UAAJ,EAAgB;AACd;AACA;AACAC;AAED;AACF;AAhD4B,SAA/B;AAkDD,OAnDgC,GAA1B;AAoDP;AACA;AACA;AACA","file":"ConnectionFactory.js","sourcesContent":["\nconst stores = ['negociacoes'];\nlet connection = null;\nlet close = null;\n\nexport const ConnectionFactory = (() => {\n  return class ConnectionFactory {\n    constructor() {\n      throw new Error('Não é possível criar instâncias dessa classe');\n    }\n    static getConnection() {\n      return new Promise((resolve, reject) => {\n        // SE UMA CONEXÃO JÁ FOI CRIADA,\n        // JÁ PASSA PARA RESOLVE E RETORNA LOGO!\n        if (connection) return resolve(connection);\n        const openRequest = indexedDB.open('jscangaceiro', 2);\n        openRequest.onupgradeneeded = e => {\n          ConnectionFactory._createStores(e.target.result);\n\n        };\n        openRequest.onsuccess = e => {\n          connection = e.target.result;\n          // GUARDANDO A FUNÇÃO ORIGINAL!\n          close = connection.close.bind(connection);\n          connection.close = () => {\n            throw new Error('Você não pode fechar diretamente a conexão');\n          }\n          resolve(connection);\n        };\n        openRequest.onerror = e => {\n          console.log(e.target.error)\n          // passa o erro para reject da promise!\n          reject(e.target.error.name)\n        };\n      });\n    }\n\n    static _createStores(connection) {\n      stores.forEach(store => {\n        // if sem bloco, mais sucinto!\n        if (connection.objectStoreNames.contains(store))\n          connection.deleteObjectStore(store);\n\n        connection.createObjectStore(store, { autoIncrement: true });\n      });\n    }\n\n    static closeConnection() {\n      if (connection) {\n        // connection.close();\n        // CHAMANDO O CLOSE ORIGINAL!\n        close();\n\n      }\n    }\n  }\n})()\n// tmp(); // chama a função!\n// A VARIÁVEL VIVE NO ESCOPO GLOBAL\n// PORQUE FOI DECLARADA FORA DA FUNÇÃO\n// const ConnectionFactory = tmp();"]}